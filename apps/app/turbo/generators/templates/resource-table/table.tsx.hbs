'use client';

import { DataTable } from '@repo/design-system/components/custom/data-table';
import { Button } from '@repo/design-system/components/ui/button';
import {
DropdownMenu,
DropdownMenuContent,
DropdownMenuItem,
DropdownMenuSeparator,
DropdownMenuShortcut,
DropdownMenuTrigger,
} from '@repo/design-system/components/ui/dropdown-menu';
import { DeleteDialog } from '@repo/design-system/components/custom/delete-dialog';
import { useDataTable } from '@repo/design-system/hooks/use-datatable';
import { Ellipsis, Eye } from 'lucide-react';
import Link from 'next/link';
import { trpc } from '@/utils/trpc';
import { {{ capitalizedName }}Dialog } from '../{{ pathName }}-dialog';
import type { DataTableRowAction } from '@repo/design-system/components/custom/data-table';
import { useState } from 'react';
import type { {{ dataType }} } from '@repo/common-types';


export const {{ capitalizedName }}Table = () => {
const { data } = trpc.{{ propertyName }}.getAll.useQuery({});
const [rowAction, setRowAction] = useState< DataTableRowAction<{{ dataType }}> | undefined
  >(undefined);

  {{#if includeMethods.delete}}
  const { mutate: delete{{ capitalizedName }} } = trpc.{{ propertyName }}.delete.useMutation({
  onSuccess: () => {
  utils.{{ propertyName }}.getAll.invalidate();
  },
  });

  const handleDelete = async (data: {{ dataType }}[]) => {
  const res = await Promise.all(data.map((d) => delete{{ capitalizedName }}({ id: d.id })));

  };
  {{/if}}


  const table = useDataTable({
  data: data || [],

  columns: [
  {
  accessorKey: 'id',
  header: '',
  size: 40,
  cell: ({ cell }) => {
  const id = cell.getValue<string>();
    return (
    <Button variant={'ghost'} size={'icon'} asChild>
      <Link href={`/companies/${id}`}>
      <Eye />
      </Link>
    </Button>
    );
    },
    },
    {
    accessorKey: 'name',
    header: 'Name',
    enableSorting: true,
    },
    {
    accessorKey: 'slug',
    header: 'Slug',
    cell: ({ cell }) => {
    const slug = cell.getValue<string>();
      return <code>/{slug}</code>;
      },
      },
      {
      accessorKey: 'description',
      header: 'Description',
      },
      {
      accessorKey: 'website',
      header: 'Website',
      },

      {
      accessorKey: 'type',
      header: 'Type',
      },
      {
      accessorKey: 'createdAt',
      enableSorting: true,
      header: 'Created At',
      cell: ({ cell }) => {
      const date = cell.getValue<Date>();
        return date.toLocaleDateString();
        },
        },
        {
        id: 'actions',
        header: '',
        size: 40,
        cell: ({ row }) => {

        return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button aria-label="Open menu" variant="ghost" className="flex size-8 p-0 data-[state=open]:bg-muted">
              <Ellipsis className="size-4" aria-hidden="true" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end" className="w-40">
            {{#if includeMethods.update}}
            <DropdownMenuItem onSelect={()=> setRowAction({ row, type: 'update' })}
              >
              Edit
            </DropdownMenuItem>
            {{/if}}
            {{#if includeMethods.delete}}
            <DropdownMenuItem onSelect={()=> setRowAction({ row, type: 'delete' })}
              >
              Delete

            </DropdownMenuItem>

            {{/if}}
          </DropdownMenuContent>
        </DropdownMenu>
        );
        },
        },
        ],
        });

        return (
        <>
          <DataTable {...table} />
          <{{ capitalizedName }}Dialog {{ propertyName }}={rowAction?.row?.original} open={rowAction?.type==='update' }
            onOpenChange={(isOpen)=> {
            if (!isOpen) {
            setRowAction(undefined);
            }
            }}
            />
            {{#if includeMethods.delete}}
            <DeleteDialog label="{{ propertyName }}" handleDelete={handleDelete} data={rowAction?.row?.original ?
              [rowAction.row.original] : []} open={rowAction?.type==='delete' } onOpenChange={()=>
              setRowAction(undefined)}
              onSuccess={() => rowAction?.row.toggleSelected(false)}
              />
              {{/if}}
        </>
        );
        };