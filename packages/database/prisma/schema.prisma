// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

generator zod {
  provider                 = "zod-prisma-types"
  output                   = "../../common-types/lib/generated"
  prismaClientPath         = "@repo/database"
  useMultipleFiles         = true
  writeNullishInModelTypes = true
  createInputTypes         = false
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// This is a stub model.
// Delete it and add your own Prisma models.
model Page {
  id      Int     @id @default(autoincrement())
  email   String  @unique
  name    String?
  content Json?
}

// #region Authentication

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  members               Member[]
  currentOrganizationId String?

  currentMembership Member? @relation("CurrentMembership", fields: [currentOrganizationId, email], references: [organizationId, email])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// #endregion

// #region Organization

model Organization {
  id   String @id @default(cuid())
  /// @zod.string.min(3, {message: "name must be at least 3 characters"})
  name String

  image String?

  members Member[]

  companies Company[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

model Member {
  email          String
  organizationId String
  role           MemberRole @default(MEMBER)
  active         Boolean    @default(true)
  title          String?
  description    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User?        @relation(fields: [email], references: [email], onDelete: Restrict, onUpdate: Restrict)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  User         User[]       @relation("CurrentMembership")

  @@id([email, organizationId])
  @@unique([organizationId, email])
}

// #endregion

// #region Company

model Company {
  id   String @id @default(cuid())
  /// @zod.string.min(3, {message: "name must be at least 3 characters"})
  name String
  /// @zod.string.min(3, {message: "must be at least 3 characters"}).regex(/^[a-z](-?[a-z])*$/, 'Slug must only contain "-" and lowercase letters'),
  slug String @unique

  image          String?
  type           String
  description    String?
  /// @zod.string.url({message: "must be a valid URL"})
  website        String?
  social         Json?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // TODO: consider adding an "Agency for representing a company"
  // TODO: consider adding a "CompanyMember" model to represent the members of a company

  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  contacts  CompanyContact[]

  campaigns      Campaign[]
  advertisements Advertisement[]
}

model CompanyContact {
  id         String  @id @default(cuid())
  companyId  String
  name       String
  email      String?
  phone      String?
  title      String?
  department String?
  notes      String?

  // TODO: consider adding a notifications setting

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// #endregion

// #region Advertising

model Advertisement {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  type      AdType
  content   String // HTML/Image URL/Video URL
  metadata  Json? // Store additional metadata based on type
  isActive  Boolean  @default(true)

  companyId String
  company   Company @relation(fields: [companyId], references: [id])

  // Relations
  campaigns CampaignAd[]
  analytics AdAnalytics[]
}

model Campaign {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  name      String
  startDate DateTime
  endDate   DateTime
  budget    Float
  status    CampaignStatus
  targeting Json // Store targeting criteria

  // Relations
  company   Company             @relation(fields: [companyId], references: [id])
  companyId String
  ads       CampaignAd[]
  analytics CampaignAnalytics[]
}

model CampaignAd {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  campaign   Campaign      @relation(fields: [campaignId], references: [id])
  campaignId String
  ad         Advertisement @relation(fields: [adId], references: [id])
  adId       String
  weight     Int           @default(1) // For A/B testing
  isActive   Boolean       @default(true)

  @@unique([campaignId, adId])
}

model Client {
  id          String   @id @default(cuid())
  firstSeen   DateTime @default(now())
  lastSeen    DateTime @updatedAt
  fingerprint String   @unique // Browser fingerprint
  userAgent   String
  language    String?
  timezone    String?
  platform    String?
  device      String?

  // Relations
  analytics AdAnalytics[]
}

model AdAnalytics {
  id        String        @id @default(cuid())
  timestamp DateTime      @default(now())
  type      AnalyticsType
  client    Client        @relation(fields: [clientId], references: [id])
  clientId  String
  ad        Advertisement @relation(fields: [adId], references: [id])
  adId      String

  // Location data
  country String?
  region  String?
  city    String?

  // Technical data
  viewportSize   String?
  screenSize     String?
  connectionType String?

  // Session data
  sessionId String?
  pageUrl   String?
  referrer  String?

  // Custom data
  metadata Json?
}

model CampaignAnalytics {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId String

  impressions Int   @default(0)
  clicks      Int   @default(0)
  spend       Float @default(0)

  // Aggregated metrics
  ctr Float? // Click-through rate
  cpc Float? // Cost per click
  cpm Float? // Cost per thousand impressions
}

enum AdType {
  HTML
  IMAGE
  VIDEO
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum AnalyticsType {
  IMPRESSION
  CLICK
  CONVERSION
}

// #endregion
